(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (cdr record)
                  #f))
            #f)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr local-table)))))
      'ok)    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation - TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))
(define coercion-table (make-table))
(define get-coercion (coercion-table 'lookup-proc))
(define put-coercion (coercion-table 'insert-proc!))

(define (list-ref items n)  
  (if (= n 0)(car items)
      (list-ref (cdr items)(- n 1))))
(define (attach-tag type-tag contents)
  (cons type-tag contents)) ;;may be list
(define (type-tag datum)
  (if (pair? datum) (car datum)
      (error "bad datum")))
(define (contents datum)
  (if (pair? datum) (cdr datum)
      (error "bad datum")))

(define (install-scheme-number-package)
  (define (tag x)(attach-tag 'scheme-number x))
  (put 'sum '(scheme-number scheme-number)
       (lambda (x y)(tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y)(tag (- x y))))
  (put 'product '(scheme-number scheme-number)
       (lambda (x y)(tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y)(tag (/ x y))))
  (put 'make 'scheme-number
       (lambda (x) (tag x))))
(install-scheme-number-package)
(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))

(define (install-rational-package)
  ;;internal precedures
  (define (numer x)(car x))
  (define (denom x)(cdr x))
  (define (make-rat n d) (cons n d))
  (define (add-rat a b)(make-rat (+ (* (numer a) (denom b)) (* (numer b) (denom a))) (* (denom a) (denom b))))
  (define (sub-rat a b)(make-rat (- (* (numer a) (denom b)) (* (numer b) (denom a))) (* (denom a) (denom b))))
  (define (mul-rat a b)(make-rat (* (numer a) (numer b)) (* (denom a) (denom b))))
  (define (div-rat a b)(make-rat (* (numer a) (denom b)) (* (denom a) (numer b))))
  ;;interface to system
  (define (tag x)(attach-tag 'rational x))
  (put 'sum '(rational rational)
       (lambda(x y)(tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda(x y)(tag (sub-rat x y))))
  (put 'product '(rational rational)
       (lambda(x y)(tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda(x y)(tag (div-rat x y))))
  (put 'make 'rational (lambda (n d)(tag (make-rat n d))))  )
(install-rational-package)
(define (make-rational n d)
  ((get 'make 'rational) n d))

(define (scheme-number->rational n)
  (make-rational (contents n) 1))
(put-coercion 'scheme-number 'rational scheme-number->rational)
(define (rational->scheme-number n)
     (make-scheme-number (/ (exact->inexact (list-ref n 1)) (cdr (cdr n)))))
  
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (let ((t1->t2 (get-coercion type1 type2))
                      (t2->t1 (get-coercion type2 type1)))
                  (cond (t1->t2 (apply-generic op (t1->t2 a1) a2))
                        (t2->t1 (apply-generic op a1 (t2->t1 a2))))))         
              (error "no available"))))))


(define (addition a b)(apply-generic 'sum a b))
(define (substraction a b)(apply-generic 'sub a b))
(define (multiplication a b)(apply-generic 'product a b))
(define (division a b)(apply-generic 'div a b))

(define (value n) (if (eq? (car n) 'scheme-number) (cdr n)
                      (cdr (rational->scheme-number n))))
(define (numbere? n) (and (pair? n) (or (eq? (car n) 'scheme-number) (eq? (car n) 'rational))))
(define (variable? x)(symbol? x))
(define (same-variable? v1 v2)(and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=numbere? exp num)(and (numbere? exp)(or (equal? exp num) (and (eq? (car exp) 'rational) (equal? (rational->scheme-number exp) num)))))
(define (make-sum a1 a2)
  (cond ((=numbere? a1 '(scheme-number . 0.0)) a2)
        ((=numbere? a2 '(scheme-number . 0.0)) a1)
        ((and (numbere? a1)(numbere? a2)) (addition a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or(=numbere? m1 '(scheme-number . 0.0))(=numbere? m2 '(scheme-number . 0.0))) '(scheme-number . 0.0))
        ((=numbere? m1 '(scheme-number . 1.0)) m2)
        ((=numbere? m2 '(scheme-number . 1.0)) m1)
        ((and (numbere? m1)(numbere? m2))(multiplication m1 m2))
        (else (list '* m1 m2))))
(define (make-sub a1 a2)
  (cond ((=numbere? a2 '(scheme-number . 0.0)) a1)
        ((and (numbere? a1)(numbere? a2))(substraction a1 a2))
        (else (list '- a1 a2))))
(define (make-div m1 m2)
  (cond ((=numbere? m1 '(scheme-number . 0.0)) '(scheme-number . 0.0))
        ((=numbere? m2 '(scheme-number . 1.0)) m1)        
        ((=numbere? m2 '(scheme-number . 0.0)) (error "zero division lol"))
        ((and (numbere? m1)(numbere? m2))(division m1 m2))
        (else (list '/ m1 m2))))
(define (make-expt p1 p2)
  (cond ((=numbere? p1 '(scheme-number . 0.0)) '(scheme-number . 0.0))
        ((or (=numbere? p1 '(scheme-number . 1.0)) (=numbere? p2 '(scheme-number . 0.0))) '(scheme-number . 1.0))
        ((=numbere? p2 '(scheme-number . 1.0)) p1)
        (else (list 'expt p1 p2))))
(define (make-sin x) (list 'sin x))
(define (make-cos x) (list 'cos x))
(define (make-tan x) (list 'tan x))
(define (make-cosec x) (list 'cosec x))
(define (make-sec x) (list 'sec x))
(define (make-cot x) (list 'cot x))
(define (make-log x)
  (cond ((numbere? x) (log (value x)))
        (else (list 'log x))))
(define (make-exp x) (list 'exp x))

(define (sum? x)(and (pair? x)(eq? (car x) '+)))
(define (product? x)(and (pair? x)(eq? (car x) '*)))
(define (sub? x)(and (pair? x)(eq? (car x) '-)))
(define (div? x)(and (pair? x)(eq? (car x) '/)))
(define (expt? x)(and (pair? x)(eq? (car x) 'expt)))
(define (sin? x)(and (pair? x)(eq? (car x) 'sin)))
(define (cos? x)(and (pair? x)(eq? (car x) 'cos)))
(define (tan? x)(and (pair? x)(eq? (car x) 'tan)))
(define (cosec? x)(and (pair? x)(eq? (car x) 'cosec)))
(define (sec? x)(and (pair? x)(eq? (car x) 'sec)))
(define (cot? x)(and (pair? x)(eq? (car x) 'cot)))
(define (inverse-sin? x) (and (pair? x) (eq? (car x) 'inverse-sin)))
(define (inverse-cos? x) (and (pair? x) (eq? (car x) 'inverse-cos)))
(define (inverse-tan? x) (and (pair? x) (eq? (car x) 'inverse-tan)))
(define (inverse-cosec? x) (and (pair? x) (eq? (car x) 'inverse-cosec)))
(define (inverse-sec? x) (and (pair? x) (eq? (car x) 'inverse-sec)))
(define (inverse-cot? x) (and (pair? x) (eq? (car x) 'inverse-cot)))
(define (log? x)(and (pair? x)(eq? (car x) 'log)))
(define (exp? x)(and (pair? x)(eq? (car x) 'exp)))
(define (addend s)(list-ref s 1))
(define (augend s)(list-ref s 2))
(define (multiplier s)(list-ref s 1))
(define (multiplicand s)(list-ref s 2))
(define (ang s)(list-ref s 1))


(define (deriv expn var)
    (cond ((numbere? expn) '(scheme-number . 0.0))  
          ((variable? expn) (if (same-variable? expn var) '(scheme-number . 1.0) '(scheme-number . 0.0)))
          ((sum? expn)(make-sum (deriv(addend expn) var) 
                               (deriv(augend expn) var)))
          ((product? expn)(make-sum (make-product (multiplier expn)
                                                 (deriv (multiplicand expn) var))
                                   (make-product (multiplicand expn)
                                                 (deriv (multiplier expn) var))))
          ((sub? expn)(make-sub (deriv(addend expn) var) 
                               (deriv(augend expn) var)))   
          ((div? expn)(make-div (make-sub (make-product (multiplicand expn)
                                             (deriv (multiplier expn) var))
                                         (make-product (multiplier expn)
                                             (deriv (multiplicand expn) var))) 
                               (make-expt (multiplicand expn) '(scheme-number . 2.0))))
          ((expt? expn)(cond ((numbere? (multiplicand expn))(make-product (make-product (multiplicand expn)
                                                                                       (make-expt (multiplier expn)
                                                                                                  (make-sub (multiplicand expn) '(scheme-number . 1.0))))
                                                                         (deriv (multiplier expn) var)))
                             (else (make-product (make-expt (multiplier expn)
                                                            (multiplicand expn))
                                                 (deriv (make-product (multiplicand expn)
                                                                      (make-log (multiplier expn))) var)))))
          ((sin? expn)(make-product (make-cos (ang expn))
                                    (deriv (ang expn) var)))
          ((cos? expn)(make-product (make-sub '(scheme-number . 0.0) (make-sin (ang expn)))
                                    (deriv (ang expn) var)))
          ((tan? expn)(make-product (make-expt (make-sec (ang expn)) '(scheme-number . 2.0))
                                    (deriv (ang expn) var)))
          ((cosec? expn)(make-product (make-sub '(scheme-number . 0.0) (make-product (make-cosec (ang expn))
                                                                (make-cot (ang expn))))
                                      (deriv (ang expn) var)))
          ((sec? expn)(make-product (make-product (make-sec (ang expn))
                                                  (make-tan (ang expn)))
                                    (deriv (ang expn) var)))
          ((cot? expn)(make-product (make-sub '(scheme-number . 0.0) (make-expt (make-cosec (ang expn)) '(scheme-number . 2.0)))
                                    (deriv (ang expn) var)))
          ((log? expn)(make-product (make-div '(scheme-number . 1.0) (ang expn))
                                    (deriv (ang expn) var)))
          ((exp? expn)(make-product (make-exp (ang expn))
                                    (deriv (ang expn) var)))
          ((inverse-sin? expn)(make-product (make-div '(scheme-number . 1.0) (make-expt (make-sub '(scheme-number . 1.0) (make-expt (ang expn) '(scheme-number . 2.0))) '(scheme-number . 0.0) '(scheme-number . 0.5))) 
                                            (deriv (ang expn) var)))
          ((inverse-cos? expn)(make-product (make-div (- '(scheme-number . 0.0) '(scheme-number . 1.0)) (make-expt (make-sub '(scheme-number . 1.0) (make-expt (ang expn) '(scheme-number . 2.0))) '(scheme-number . 0.0) '(scheme-number . 0.5)))
                                            (deriv (ang expn) var)))
          ((inverse-tan? expn)(make-product (make-div '(scheme-number . 1.0) (make-sum '(scheme-number . 1.0) (make-expt (ang expn) '(scheme-number . 2.0))))
                                            (deriv (ang expn) var)))
          ((inverse-cosec? expn)(make-product (make-div (- '(scheme-number . 0.0) '(scheme-number . 1.0)) (make-product (ang expn) 
                                                                              (make-expt (make-sub (make-expt (ang expn) '(scheme-number . 2.0)) '(scheme-number . 1.0)) '(scheme-number . 0.0) '(scheme-number . 0.5))))
                                              (deriv (ang expn) var)))
          ((inverse-sec? expn)(make-product (make-div '(scheme-number . 1.0) (make-product (ang expn) (make-expt (make-sub (make-expt (ang expn) '(scheme-number . 2.0)) '(scheme-number . 1.0)) '(scheme-number . 0.0) '(scheme-number . 0.5))))
                                            (deriv (ang expn) var)))
          ((inverse-cot? expn)(make-product (make-div (- '(scheme-number . 0.0) '(scheme-number . 1.0)) (make-sum '(scheme-number . 1.0) (make-expt (ang expn) '(scheme-number . 2.0))))
                                            (deriv (ang expn) var)))      
          (else (error "unknown shit man"))))


(newline)
(newline)
;; (display (deriv '(log (sin x)) 'x)) 
;; (display (deriv '(* (scheme-number . 3.0) x) 'x))
;; (display (deriv '(+ (* (rational 4 . 5) x) (* (scheme-number . 3.0) x)) 'x))
;; (display (deriv '(* y z) 'x))
;; (display (deriv '(cos (* (scheme-number . 3.0) (expt x (rational 4 . 5)))) 'x))
;; (display (deriv '(inverse-tan (exp (* (rational 1 . 3) (sin (expt x (scheme-number . 2.0)))))) 'x))
(newline)
(newline)
(newline)