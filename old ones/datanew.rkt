(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (cdr record)
                  #f))
            #f)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr local-table)))))
      'ok)    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation - TABLE" m))))
    dispatch))
(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))
(define coercion-table (make-table))
(define get-coercion (coercion-table 'lookup-proc))
(define put-coercion (coercion-table 'insert-proc!))

(define (attach-tag type-tag contents)
  (cons type-tag contents)) ;;may be list
(define (type-tag datum)
  (if (pair? datum) (car datum)
      (error "bad datum")))
(define (contents datum)
  (if (pair? datum) (cdr datum)
      (error "bad datum")))

(define (install-scheme-number-package)
  (define (tag x)(attach-tag 'scheme-number x))
  (put 'sum '(scheme-number scheme-number)
       (lambda (x y)(tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y)(tag (- x y))))
  (put 'product '(scheme-number scheme-number)
       (lambda (x y)(tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y)(tag (/ x y))))
  (put 'make 'scheme-number
       (lambda (x) (tag x))))
(install-scheme-number-package)
(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))

(define (install-rational-package)
  ;;internal precedures
  (define (numer x)(car x))
  (define (denom x)(cdr x))
  (define (make-rat n d)(let ((g (gcd n d)))
                          (cons (/ n g) (/ d g))))
  (define (add-rat a b)(make-rat (+ (* (numer a) (denom b)) (* (numer b) (denom a))) (* (denom a) (denom b))))
  (define (sub-rat a b)(make-rat (- (* (numer a) (denom b)) (* (numer b) (denom a))) (* (denom a) (denom b))))
  (define (mul-rat a b)(make-rat (* (numer a) (numer b)) (* (denom a) (denom b))))
  (define (div-rat a b)(make-rat (* (numer a) (denom b)) (* (denom a) (numer b))))
  ;;interface to system
  (define (tag x)(attach-tag 'rational x))
  (put 'sum '(rational rational)
       (lambda(x y)(tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda(x y)(tag (sub-rat x y))))
  (put 'product '(rational rational)
       (lambda(x y)(tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda(x y)(tag (div-rat x y))))
  (put 'make 'rational (lambda (n d)(tag (make-rat n d)))))
(install-rational-package)
(define (make-rational n d)
  ((get 'make 'rational) n d))

(define (scheme-number->rational n)
  (make-rational (contents n) 1))
(put-coercion 'scheme-number 'rational scheme-number->rational)
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (let ((t1->t2 (get-coercion type1 type2))
                      (t2->t1 (get-coercion type2 type1)))
                  (cond (t1->t2 (apply-generic op (t1->t2 a1) a2))
                        (t2->t1 (apply-generic op a1 (t2->t1 a2))))))         
              (error "no available"))))))


(define (addition a b)(apply-generic 'sum a b))
(define (substraction a b)(apply-generic 'sub a b))
(define (multiplication a b)(apply-generic 'product a b))
(define (division a b)(apply-generic 'div a b))

(define x (make-rational 2 3))
(define y (make-rational 3 5))
(newline)
(newline)
(display (division x y))
(newline)
(newline)
(display (division y x))
(newline)

