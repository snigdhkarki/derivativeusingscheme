(define (list-ref items n)  
  (if (= n 0)(car items)
      (list-ref (cdr items)(- n 1))))

(define (variable? x)(symbol? x))
(define (same-variable? v1 v2)(and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)(and (number? exp)(= exp num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1)(number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or(=number? m1 0)(=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1)(number? m2))(* m1 m2))
        (else (list '* m1 m2))))
(define (make-sub a1 a2)
  (cond ((=number? a2 0) a1)
        ((and (number? a1)(number? a2))(- a1 a2))
        (else (list '- a1 a2))))
(define (make-div m1 m2)
  (cond ((=number? m1 0) 0)
        ((=number? m2 1) m1)        
        ((=number? m2 0) (error "zero division lol"))
        ((and (number? m1)(number? m2))(/ m1 m2))
        (else (list '/ m1 m2))))
(define (make-expt p1 p2)
  (cond ((=number? p1 0) 0)
        ((or (=number? p1 1) (=number? p2 0)) 1)
        ((=number? p2 1) p1)
        ((and (number? p1)(number? p2))(expt p1 p2))
        (else (list 'expt p1 p2))))
(define (make-sin x) (list 'sin x))
(define (make-cos x) (list 'cos x))
(define (make-tan x) (list 'tan x))
(define (make-cosec x) (list 'cosec x))
(define (make-sec x) (list 'sec x))
(define (make-cot x) (list 'cot x))

(define (sum? x)(and (pair? x)(eq? (car x) '+)))
(define (product? x)(and (pair? x)(eq? (car x) '*)))
(define (sub? x)(and (pair? x)(eq? (car x) '-)))
(define (div? x)(and (pair? x)(eq? (car x) '/)))
(define (expt? x)(and (pair? x)(eq? (car x) 'expt)))
(define (sin? x)(and (pair? x)(eq? (car x) 'sin)))
(define (cos? x)(and (pair? x)(eq? (car x) 'cos)))
(define (tan? x)(and (pair? x)(eq? (car x) 'tan)))
(define (cosec? x)(and (pair? x)(eq? (car x) 'cosec)))
(define (sec? x)(and (pair? x)(eq? (car x) 'sec)))
(define (cot? x)(and (pair? x)(eq? (car x) 'cot)))
(define (addend s)(list-ref s 1))
(define (augend s)(list-ref s 2))
(define (multiplier s)(list-ref s 1))
(define (multiplicand s)(list-ref s 2))
(define (ang s)(list-ref s 1))


(define (deriv exp var)
    (cond ((number? exp) 0)  
          ((variable? exp) (if (same-variable? exp var) 1 0))
          ((sum? exp)(make-sum (deriv(addend exp) var) 
                               (deriv(augend exp) var)))
          ((product? exp)(make-sum (make-product (multiplier exp)
                                                 (deriv (multiplicand exp) var))
                                   (make-product (multiplicand exp)
                                                 (deriv (multiplier exp) var))))
          ((sub? exp)(make-sub (deriv(addend exp) var) 
                               (deriv(augend exp) var)))   
          ((div? exp)(make-div (make-sub (make-product (multiplicand exp)
                                             (deriv (multiplier exp) var))
                                         (make-product (multiplier exp)
                                             (deriv (multiplicand exp) var))) 
                               (make-expt (multiplicand exp) 2)))
          ((expt? exp)(make-product (make-product (multiplicand exp) 
                                                  (make-expt (multiplier exp) 
                                                             (make-sub (multiplicand exp) 1)))
                                    (deriv (multiplier exp) var)))
          (else (error "unknown shit man"))))


(define pi 3.14159265358979323846)
(display (sin (/ pi 2.0)))
(newline)





