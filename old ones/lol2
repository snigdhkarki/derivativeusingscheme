(define (list-ref items n)  
  (if (= n 0)(car items)
      (list-ref (cdr items)(- n 1))))

(define (variable? x)(symbol? x))
(define (same-variable? v1 v2)(and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)(and (number? exp)(= exp num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1)(number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or(=number? m1 0)(=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1)(number? m2))(* m1 m2))
        (else (list '* m1 m2))))
(define (make-sub a1 a2)
  (cond ((=number? a2 0) a1)
        ((and (number? a1)(number? a2))(- a1 a2))
        (else (list '- a1 a2))))
(define (make-div m1 m2)
  (cond ((=number? m1 0) 0)
        ((=number? m2 1) m1)        
        ((=number? m2 0) (error "zero division lol"))
        ((and (number? m1)(number? m2))(/ m1 m2))
        (else (list '/ m1 m2))))
(define (make-expt p1 p2)
  (cond ((=number? p1 0) 0)
        ((or (=number? p1 1) (=number? p2 0)) 1)
        ((=number? p2 1) p1)
        ((and (number? p1)(number? p2))(expt p1 p2))
        (else (list 'expt p1 p2))))
(define (make-sin x) (list 'sin x))
(define (make-cos x) (list 'cos x))
(define (make-tan x) (list 'tan x))
(define (make-cosec x) (list 'cosec x))
(define (make-sec x) (list 'sec x))
(define (make-cot x) (list 'cot x))
(define (make-log x)
  (cond ((number? x) (log x))
        (else (list 'log x))))
(define (make-exp x) (list 'exp x))

(define (sum? x)(and (pair? x)(eq? (car x) '+)))
(define (product? x)(and (pair? x)(eq? (car x) '*)))
(define (sub? x)(and (pair? x)(eq? (car x) '-)))
(define (div? x)(and (pair? x)(eq? (car x) '/)))
(define (expt? x)(and (pair? x)(eq? (car x) 'expt)))
(define (sin? x)(and (pair? x)(eq? (car x) 'sin)))
(define (cos? x)(and (pair? x)(eq? (car x) 'cos)))
(define (tan? x)(and (pair? x)(eq? (car x) 'tan)))
(define (cosec? x)(and (pair? x)(eq? (car x) 'cosec)))
(define (sec? x)(and (pair? x)(eq? (car x) 'sec)))
(define (cot? x)(and (pair? x)(eq? (car x) 'cot)))
(define (log? x)(and (pair? x)(eq? (car x) 'log)))
(define (exp? x)(and (pair? x)(eq? (car x) 'exp)))
(define (addend s)(list-ref s 1))
(define (augend s)(list-ref s 2))
(define (multiplier s)(list-ref s 1))
(define (multiplicand s)(list-ref s 2))
(define (ang s)(list-ref s 1))


(define (deriv expn var)
    (cond ((number? expn) 0)  
          ((variable? expn) (if (same-variable? expn var) 1 0))
          ((sum? expn)(make-sum (deriv(addend expn) var) 
                               (deriv(augend expn) var)))
          ((product? expn)(make-sum (make-product (multiplier expn)
                                                 (deriv (multiplicand expn) var))
                                   (make-product (multiplicand expn)
                                                 (deriv (multiplier expn) var))))
          ((sub? expn)(make-sub (deriv(addend expn) var) 
                               (deriv(augend expn) var)))   
          ((div? expn)(make-div (make-sub (make-product (multiplicand expn)
                                             (deriv (multiplier expn) var))
                                         (make-product (multiplier expn)
                                             (deriv (multiplicand expn) var))) 
                               (make-expt (multiplicand expn) 2)))
          ((expt? expn)(make-product (make-expt (multiplier expn) (multiplicand expn))
                                     (deriv (make-product (multiplicand expn) (make-log (multiplier expn))) var)))
          ((sin? expn)(make-product (make-cos (ang expn))
                                    (deriv (ang expn) var)))
          ((cos? expn)(make-product (make-sub 0 (make-sin (ang expn)))
                                    (deriv (ang expn) var)))
          ((tan? expn)(make-product (make-expt (make-sec (ang expn)) 2)
                                    (deriv (ang expn) var)))
          ((cosec? expn)(make-product (make-sub 0 (make-product (make-cosec (ang expn))
                                                                (make-cot (ang expn))))
                                      (deriv (ang expn) var)))
          ((sec? expn)(make-product (make-product (make-sec (ang expn))
                                                  (make-tan (ang expn)))
                                    (deriv (ang expn) var)))
          ((cot? expn)(make-product (make-sub 0 (make-expt (make-cosec (ang expn)) 2))
                                    (deriv (ang expn) var)))
          ((log? expn)(make-product (make-div 1 (ang expn))
                                    (deriv (ang expn) var)))
          ((exp? expn)(make-product (make-exp (ang expn))
                                    (deriv (ang expn) var)))
          
          (else (error "unknown shit man"))))



(display (deriv '(expt x 5) 'x)) 
(newline)





